/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'com.jfrog.bintray' version '1.8.0'
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.github.johnrengelman.shadow'

    group 'com.jagrosh'
    version = '2.0'

    project.ext {
        jdaVersion = '3.4.0_318'
        slf4jVersion = '1.7.25'
        okhttpVersion = '3.9.1'

        artifactId = rootProject == project ? rootProject.name.toLowerCase() : (rootProject.name + '-' + project.name).toLowerCase()
    }

    repositories {
        jcenter()
    }

    publishing {
        publications {
            BintrayRelease(MavenPublication) {
                groupId = project.group
                artifactId = project.artifactId
                version = project.version
            }
        }
    }

    bintray {

        dryRun = true

        user = bintrayUsername
        key = bintrayApiKey
        publications = ['BintrayRelease']
        publish = true
        pkg {
            repo = 'maven'
            name = 'JDA-Utilities'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/JDA-Applications/JDA-Utilities'
            version {
                name = project.version
                released = new Date()
            }
        }
    }

    bintrayUpload {
        dependsOn { rootProject.getTasksByName("build", true) }

        onlyIf { !project.property('bintrayUsername')?.trim()?.empty }
        onlyIf { !project.property('bintrayApiKey')?.trim()?.empty }
    }
}

subprojects {
    apply plugin: 'java-library'

    compileJava {
        options.encoding = 'UTF-8'
    }

    jar {
        baseName "$project.artifactId"

        manifest {
            attributes(
                    'Implementation-Title': project.artifactId,
                    'Implementation-Version': project.version
            )
        }
    }

    shadowJar {
        baseName "$project.artifactId"
    }

    javadoc {
        options.memberLevel = JavadocMemberLevel.PROTECTED
        options.author()
        options.encoding = 'UTF-8'
        options.tags 'apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'
    }

    tasks.create('javadocJar', Jar) {
        dependsOn tasks.javadoc
        from javadoc.destinationDir

        baseName "$project.artifactId"
        classifier 'javadoc'
        extension 'jar'
        group 'build'
    }

    tasks.create('sourceJar', Jar) {
        dependsOn tasks.classes
        from sourceSets.main.allSource

        baseName "$project.artifactId"
        classifier 'sources'
        extension 'jar'
        group 'build'
    }

    build {
        dependsOn javadocJar
        dependsOn sourceJar
        dependsOn shadowJar
    }

    publishing {
        publications {
            BintrayRelease(MavenPublication) {
                from components.java
                artifact tasks.javadocJar
                artifact tasks.sourceJar
            }
        }
    }
}

configurations {
    api {
        description = "api"
        transitive = true
    }
}

dependencies {
    api subprojects
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

tasks.create("shadowJar", ShadowJar) {
    group 'shadow'

    dependsOn({ rootProject.getTasksByName("jar", true) } as Object[])

    baseName "$project.artifactId"
    classifier 'all'
    version "$project.version"

    from subprojects*.jar

    destinationDir project.file('build/libs/')
}

tasks.create("build") {
    group 'build'

    dependsOn shadowJar
}

tasks.create("clean", Delete) {
    group 'build'

    delete['build/']
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it instanceof ProjectDependency ? it.dependencyProject.artifactId : it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}
