/*
 * Copyright 2016-2018 John Grosh (jagrosh) & Kaidan Gustave (TheMonitorLizard)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'com.jfrog.bintray' version '1.8.0'
}

tasks.create(name: 'build') {
    group = 'build'
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = 'com.jagrosh'
    version = '2.1'

    project.ext {
        jdaVersion = '3.5.0_335'
        slf4jVersion = '1.7.25'
        okhttpVersion = '3.9.1'
        findbugsVersion = '3.0.2'

        jda = { project.dependencies.compileOnly group: 'net.dv8tion', name: 'JDA', version: jdaVersion }
        slf4j = { project.dependencies.compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion }
        okhttp = { project.dependencies.compile group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttpVersion }
        findbugs = { project.dependencies.compile group: 'com.google.code.findbugs', name: 'jsr305', version: findbugsVersion }

        include = { String name -> project.dependencies.compile project.project(':' + name) }

        artifactId = (rootProject == project ? rootProject.name : (rootProject.name + '-' + project.name)).toLowerCase()

        moduleName = rootProject == project ? "com.jagrosh.jdautilities" :
                "com.jagrosh.jdautilities.${project.name.toLowerCase()}"
    }

    repositories {
        jcenter()
    }

    build {
        dependsOn({ javadocJar } as Object)
        dependsOn({ sourceJar } as Object)
        dependsOn({ shadowJar } as Object)
    }

    bintray {
        user = bintrayUsername
        key = bintrayApiKey
        publications = ['BintrayRelease']
        publish = true
        pkg {
            repo = 'maven'
            name = 'JDA-Utilities'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/JDA-Applications/JDA-Utilities'
            version {
                name = project.version
                released = new Date()
            }
        }
    }

    bintrayUpload {
        dependsOn { rootProject.getTasksByName('build', true) }

        onlyIf { !project.property('bintrayUsername')?.trim()?.empty }
        onlyIf { !project.property('bintrayApiKey')?.trim()?.empty }
    }

    publishing {
        publications {
            BintrayRelease(MavenPublication) {
                groupId = project.group
                artifactId = project.artifactId
                version = project.version
            }
        }
    }
}

subprojects {
    apply plugin: 'java'

    compileJava {
        options.encoding = 'UTF-8'
    }

    jar {
        baseName "$project.artifactId"

        manifest {
            attributes(
                    'Implementation-Title': project.artifactId,
                    'Implementation-Version': project.version,
                    'Automatic-Module-Name': "${project.moduleName}"
            )
        }
    }

    shadowJar {
        baseName "$project.artifactId"
    }

    javadoc {
        options.memberLevel = JavadocMemberLevel.PROTECTED
        options.author()
        options.encoding = 'UTF-8'
        options.tags 'apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'
    }

    tasks.create('javadocJar', Jar) {
        dependsOn tasks.javadoc
        from javadoc.destinationDir

        baseName "$project.artifactId"
        classifier 'javadoc'
        extension 'jar'
        group 'build'
    }

    tasks.create('sourceJar', Jar) {
        dependsOn tasks.classes
        from sourceSets.main.allSource

        baseName "$project.artifactId"
        classifier 'sources'
        extension 'jar'
        group 'build'
    }

    publishing {
        publications {
            BintrayRelease(MavenPublication) {
                from components.java
                artifact tasks.javadocJar
                artifact tasks.sourceJar
            }
        }
    }
}

configurations {
    compile {
        description = 'compile'
        transitive = true
    }
}

dependencies {
    compile subprojects
}

tasks.create('jar', ShadowJar) {
    group = 'build'

    from { subprojects*.jar }

    destinationDir = project.file("$project.buildDir/libs/")

    baseName = "$project.artifactId"
    version = "$project.version"

    manifest {
        attributes(
                'Implementation-Title': project.artifactId,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': "${project.moduleName}"
        )
    }
}

tasks.create('shadowJar', ShadowJar) {
    group = 'shadow'
    dependsOn({ rootProject.getTasksByName('jar', true) } as Object[])

    from { subprojects*.jar }

    destinationDir = project.file("$project.buildDir/libs/")

    configurations += configurations.runtime

    baseName = "$project.artifactId"
    classifier = 'all'
    version = "$project.version"

    manifest {
        attributes(
                'Implementation-Title': project.artifactId,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': "${project.moduleName}"
        )
    }
}

tasks.create('javadoc', Javadoc) {
    group = 'documentation'
    dependsOn({ subprojects*.getTasksByName('javadoc', true) } as Object[])

    source = { subprojects*.sourceSets.main.allJava }
    classpath = project.files(subprojects*.javadoc.classpath as FileCollection[])

    destinationDir = project.file("$project.buildDir/docs/")

    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author()
    options.encoding = 'UTF-8'
    options.tags 'apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'
}

tasks.create('javadocJar', Jar) {
    group = 'build'
    dependsOn tasks.javadoc

    from { javadoc.destinationDir }

    destinationDir = project.file("$project.buildDir/libs/")

    baseName = "$project.artifactId"
    version = "$project.version"
    classifier = 'javadoc'
    extension = 'jar'
}

tasks.create('sourceJar', Jar) {
    group = 'build'
    dependsOn({ rootProject.getTasksByName('classes', true) } as Object[])

    from { subprojects*.sourceSets.main.allSource }

    destinationDir = project.file("$project.buildDir/libs/")

    baseName = "$project.artifactId"
    version = "$project.version"
    classifier = 'sources'
    extension = 'jar'
}

tasks.create('clean', Delete) {
    group = 'build'

    delete = project.buildDir
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            pom.withXml {
                def repositoriesNode = asNode().appendNode('repositories')
                def repositoryNode = repositoriesNode.appendNode('repository')

                repositoryNode.appendNode('name', 'bintray')
                repositoryNode.appendNode('id', 'bintray-jagrosh-maven')
                repositoryNode.appendNode('url', 'https://dl.bintray.com/jagrosh/maven')

                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it instanceof ProjectDependency ? it.dependencyProject.artifactId : it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'compile')
                }
            }
        }
    }
}
